Variable assignment should have no spaces
          VAR=9
          VAR=$(($VAR+1))


If the deletion has not been committed, the command below will restore the deleted file in the working tree.
         $ git checkout -- <file>

Read a line (-r is for ignoring backslash escapes, -a is for storing result in an array)
          EX1)
            IFS=' ' read -ra ADDR <<< "H e l lo;Guys;How;Are;You"
            for i in "${ADDR[@]}"; do
                    echo $i
            done

          EX2)
            #!/bin/bash
            IFS="," read -ra line<<<"hello,what,you"
            echo ${line[0]}


When you pass a variable to a function, make sure to put a double quotation to treat it as one argument:
          #!/bin/bash
          function takeFirstInArray(){
                  IFS=',' read -a ADDR <<< "$1" #THIS
                  for i in ${ADDR[@]} ; do
                          echo $i
                  done

          }
          for i in $(ls categories) ; do
                  while read -r line ; do
                          echo $line
                          takeFirstInArray "$line" #THIS
                  done < categories/$i
          done
          
         
         
ls -l '^1*', which uses shell glob means line that starts with 1, but grep '^1*', 
which uses regular expression gets all the files that has zero or more '1'.

wc -l categories/animals | awk '{ print $1 }'
          prints out the number of lines
          
$TEMP >> file.txt doesn't work. it will try run the variable value as a command. Instead, do echo $TEMP >> file.txt


https://www.gnu.org/software/sed/manual/sed.html#tail <- good place to find doc for GNU, and sed.


touch ${J}hello <- dont do touch $(J)hello or touch $J_hello

=====================
http://tldp.org/LDP/abs/html/comparison-ops.html
http://tldp.org/LDP/abs/html/index.html
http://tldp.org/LDP/abs/html/string-manipulation.html#SUBSTRINGEX

Get substring of 4 characters starting from 3rd character (awk counts from 1)
          String="125Stiaewfj"
          echo | awk '{ print substr("'"${String}"'",3,4)}'
          ===> output will be 5Sti (4 characters, from 3rd character of String)
Get substring starting from 2nd character
          echo | awk '{ print substr("'"${String}"'",2)}'

Check string starts with z:
          [[ $a == z* ]]   # True if $a starts with an "z" (pattern matching)
